# class Solution(object):    
#     def maxBalancedShipments(weights):
#         n = len(weights)
#         start = 0
#         count = 0

#         while start < n:
#             max_val = weights[start]
#             end = start + 1
#             found = False

#             while end < n:
#                 max_val = max(max_val, weights[end])
#                 if weights[end] < max_val:
#                     count += 1
#                     start = end + 1  # move to next block
#                     found = True
#                     break
#                 end += 1

#             if not found:
#                 start += 1  # skip this one

#         return count


def maxBalancedShipments(weight):
    n = len(weight)
    count = 0
    i = 0

    while i < n - 1:
        cur_max = weight[i]
        j = i
        found = False

        while j < n:
            cur_max = max(cur_max, weight[j])
            if weight[j] < cur_max:
                # Valid shipment ends at j
                count += 1
                i = j + 1  # next shipment starts after j
                found = True
                break
            j += 1

        if not found:
            break

    return count



# Paste your large input here
weightsreplace with your full array
print(maxBalancedShipments(weights))


weights = [2, 5, 1, 4, 3]
# Explanation: [2,5,1] and [4,3] → 2 shipments
# Output: 2
print(maxBalancedShipments(weights))
weights = [7, 7, 7, 7]
# All shipments will be invalid: last == max → not strictly less
# Output: 0
print(maxBalancedShipments(weights))